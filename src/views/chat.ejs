<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AIエージェントチャット</title>
  <style>
    body {
      font-family: 'Helvetica Neue', Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f5f5f5;
    }
    h1 {
      text-align: center;
      color: #333;
    }
    .chat-container {
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }
    .chat-messages {
      height: 400px;
      overflow-y: auto;
      padding: 20px;
      display: flex;
      flex-direction: column;
    }
    .message {
      margin-bottom: 15px;
      padding: 10px 15px;
      border-radius: 18px;
      max-width: 70%;
    }
    .user-message {
      align-self: flex-end;
      background-color: #0084ff;
      color: white;
    }
    .agent-message {
      align-self: flex-start;
      background-color: #e5e5ea;
      color: #333;
    }
    .chat-input {
      display: flex;
      padding: 10px;
      border-top: 1px solid #e5e5ea;
    }
    #message-input {
      flex-grow: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 20px;
      outline: none;
      resize: none;
      min-height: 40px;
      max-height: 120px;
      overflow-y: auto;
    }
    #send-button {
      margin-left: 10px;
      padding: 10px 20px;
      background-color: #0084ff;
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
    }
    #send-button:hover {
      background-color: #0073e6;
    }
    .typing-indicator {
      align-self: flex-start;
      background-color: #e5e5ea;
      color: #333;
      padding: 10px 15px;
      border-radius: 18px;
      display: none;
    }
  </style>
</head>
<body>
  <h1>AIエージェントチャット</h1>
  <div class="chat-container">
    <div class="chat-messages" id="chat-messages">
      <div class="message agent-message">
        よう、兄弟！何か相談したいことがあるなら、遠慮なく言ってくれ！
      </div>
    </div>
    <div class="typing-indicator" id="typing-indicator">
      相談役が考え中...
    </div>
    <div class="chat-input">
      <textarea id="message-input" placeholder="メッセージを入力..." autocomplete="off"></textarea>
      <button id="send-button">送信</button>
    </div>
  </div>

  <script>
    const chatMessages = document.getElementById('chat-messages');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const typingIndicator = document.getElementById('typing-indicator');

    // メッセージ送信処理
    async function sendMessage() {
      const message = messageInput.value.trim();
      if (!message) return;

      // ユーザーメッセージをUIに追加
      addMessage(message, 'user');
      messageInput.value = '';

      // 入力中表示
      typingIndicator.style.display = 'block';
      chatMessages.scrollTop = chatMessages.scrollHeight;

      try {
        // APIにメッセージを送信
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message }),
        });

        const data = await response.json();
        
        // 入力中表示を非表示
        typingIndicator.style.display = 'none';
        
        // エージェントの返答をUIに追加
        if (data.reply) {
          addMessage(data.reply, 'agent');
        }
      } catch (error) {
        console.error('Error:', error);
        typingIndicator.style.display = 'none';
        addMessage('エラーが発生しました。もう一度お試しください。', 'agent');
      }
    }

    // メッセージをUIに追加する関数
    function addMessage(text, sender) {
      const messageElement = document.createElement('div');
      messageElement.classList.add('message');
      messageElement.classList.add(sender === 'user' ? 'user-message' : 'agent-message');
      messageElement.textContent = text;
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // 送信ボタンのクリックイベント
    sendButton.addEventListener('click', sendMessage);

    // Enterキーでの送信を改行に変更し、Command/Ctrl + Enterで送信するように変更
    messageInput.addEventListener('keydown', (e) => {
      // Command(Mac)またはCtrl(Windows)キーが押されている状態でEnterが押された場合に送信
      if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {
        e.preventDefault(); // デフォルトの動作を防止
        sendMessage();
      } 
      // 通常のEnterキーは改行を許可（デフォルト動作のまま）
    });
  </script>
</body>
</html> 